on:
  push:
    tags:
      - "v*"

name: Release

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write

jobs:
  create_release:
    name: Create draft release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create draft release
        run: gh release create ${{ github.ref_name }} --notes "" --draft

  build:
    name: Build binaries
    needs: create_release
    runs-on: ${{ matrix.os }}
    env:
      BUILD_FLAGS: build --release --locked --target ${{ matrix.target }}
      ARCHIVE_NAME: fixit-${{ github.ref_name }}-${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: false
    steps:
      - name: Install cargo-cross
        if: ${{ matrix.cross }}
        run: |
          mkdir cross
          cd cross
          gh release download --repo 'cross-rs/cross' --pattern 'cross-x86_64-unknown-linux-musl.tar.gz'
          tar -xvzf cross-x86_64-unknown-linux-musl.tar.gz
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Install cargo-deb
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb

      - name: Add Rust target
        if: ${{ ! matrix.cross }}
        run: rustup target add ${{ matrix.target }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build (cargo)
        if: ${{ ! matrix.cross }}
        run: cargo $BUILD_FLAGS

      - name: Build (cross)
        if: ${{ matrix.cross }}
        run: cross $BUILD_FLAGS

      - name: Upload binary archive
        run: |
          cp ./target/${{ matrix.target }}/release/fixit .
          tar -czvf $ARCHIVE_NAME.tar.gz fixit
          cat $ARCHIVE_NAME.tar.gz | shasum -a 256 | cut -d " " -f 1 | tr -d "\n" > $ARCHIVE_NAME.sha256
          gh release upload ${{ github.ref_name }} $ARCHIVE_NAME.{tar.gz,sha256}

      - name: Create and upload deb package
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo deb --target=${{ matrix.target }} --no-build --no-strip
          gh release upload ${{ github.ref_name }} ./target/${{ matrix.target }}/debian/*.deb

  publish_release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish release
        run: gh release edit ${{ github.ref_name }} --draft=false

  upload_dep_repo:
    name: Upload deb repository
    runs-on: ubuntu-latest
    needs: publish_release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Publish repository
        run: |
          mkdir -p _site/ppa
          cd _site/ppa
          gh release download ${{ github.ref_name }} --pattern '*.deb'
          dpkg-scanpackages --multiversion . /dev/null | gzip -9c > Packages.gz
          cd ../..
      - name: Upload repository to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path:
            ./_site

  publish_dep_repo:
    name: Publish deb repository on GitGub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: upload_dep_repo
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
